language: rust
cache: cargo
sudo: true
# use trusty for newer openblas
dist: trusty
os: linux
rust:
  - stable
  - beta
  - nightly
matrix:
  allow_failures:
    - rust: nightly
before_install:
  - sudo apt-get update
addons:
  apt:
    packages:
      - libopenblas-dev
      - gfortran
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev
      - libiberty-dev
      - zlib1g-dev
      - libudev-dev
# Add clippy
before_script:
  - |
      if [[ "$TRAVIS_RUST_VERSION" == "nightly" ]]; then
        ( ( cargo install clippy && export CLIPPY=true ) || export CLIPPY=false );
      fi
  - export PATH=$PATH:~/.cargo/bin
script:
  - cargo build
  - RUSTFLAGS=-Clink-dead-code cargo test #link dead code here bloats the file size, but gives us correct coverage results.
  - |
      if [[ "$TRAVIS_RUST_VERSION" == "nightly" && $CLIPPY ]]; then
        cargo build --features="clippy"
      fi
after_success:
  # Upload docs
  - |
      if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_RUST_VERSION" == "stable" && "$TRAVIS_PULL_REQUEST" = "false" && "$TRAVIS_BRANCH" == "master" ]]; then
        cargo rustdoc -- --no-defaults --passes collapse-docs --passes unindent-comments --passes strip-priv-imports &&
        echo "<meta http-equiv=refresh content=0;url=wafer/index.html>" > target/doc/index.html &&
        git clone https://github.com/davisp/ghp-import.git &&
        ./ghp-import/ghp_import.py -n -p -f -m "Documentation upload" -r https://"$GH_TOKEN"@github.com/"$TRAVIS_REPO_SLUG.git" target/doc &&
        echo "Uploaded documentation"
      fi
  # Coverage report
  - |
      if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_RUST_VERSION" == "stable" ]]; then
        wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
        tar xzf master.tar.gz &&
        cd kcov-master &&
        mkdir build &&
        cd build &&
        cmake .. &&
        make &&
        sudo make install &&
        cd ../.. &&
        rm -rf kcov-master &&
        for file in target/debug/wafer-*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
        bash <(curl -s https://codecov.io/bash) &&
        echo "Uploaded code coverage"
      fi
